exports["Lite"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_mat4__ = __webpack_require__(1);


class Group {
  constructor() {
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    
    this.children = [];
    this.transform = new __WEBPACK_IMPORTED_MODULE_0__geom_mat4__["a" /* default */]();
  }
  
  add(child) {
    this.children.indexOf(child) === -1 ? this.children.push(child) : ``;
    
    this.refreshDimensions();
  }
  
  refreshDimensions() {
    const children = this.children;
    let minX = Number.MAX_SAFE_INTEGER;
    let maxX = Number.MIN_SAFE_INTEGER;
    let minY = Number.MAX_SAFE_INTEGER;
    let maxY = Number.MIN_SAFE_INTEGER;
    
    for (let i = 0, l = children.length, child; i < l; i++) {
      child = children[i];
      
      minX = child.x < minX ? child.x : minX;
      maxX = child.x > maxX ? child.x : maxX;
      minY = child.y < minY ? child.y : minY;
      maxY = child.y > maxY ? child.y : maxY;
    }
    
    this.width = maxX - minX;
    this.height = maxY - minY;
  }
  
  update() {
    const children = this.children;
    
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].update();
    }
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Group;



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*
* 0,  1,  2,  3,
* 4,  5,  6,  7,
* 8,  9,  10, 11,
* 12, 13, 14, 15
* */

class Mat4 extends Float32Array {
  constructor() {
    super(16);
    this.identity();
  }

  identity() {
    const t = this;
    t[0] = t[5] = t[10] = t[15] = 1;
    t[1] = t[2] = t[3] = t[4] = t[6] = t[7] = t[8] = t[9] = t[11] = t[12] = t[13] = t[14] = 0;
  }

  setCanvasProjection(w, h) {
    const t = this;
    
    t[0] = 2 / w;
    t[5] = -2 / h;
    t[12] = -w / 2;
    t[13] = h / 2;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Mat4;



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__group__ = __webpack_require__(0);


class Sprite extends __WEBPACK_IMPORTED_MODULE_0__group__["a" /* default */] {
  constructor(texture, frameName) {
    super();
    
    this.texture = texture;
    this.frameName = frameName;
    
    this.x = this.left = 0;
    this.y = this.top = 0;
    this.width = this.right = texture.width;
    this.height = this.bottom = texture.height;

    // [x, y, tex]
    // worldTransform zIndex

    const frame = this.frame = texture.atlas.frames.filter(f => f.filename === frameName)[0].frame; // todo awesome
    const texW = texture.image.width;
    const texH = texture.image.height;
    
    this.texCoord = {
      l: frame.x / texW, 
      r: (frame.x + frame.w) / texW, 
      t: frame.y / texH, 
      b: (frame.y + frame.h) / texH
    };
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sprite;


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Texture {
  constructor(image, atlas) {
    this.image = image;
    this.atlas = atlas;
  }  
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Texture;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__programManager_chuncks_standard_vert__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__programManager_chuncks_standard_vert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__programManager_chuncks_standard_vert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__programManager_chuncks_standard_frag__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__programManager_chuncks_standard_frag___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__programManager_chuncks_standard_frag__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__programManager_program__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__programManager_tex__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_mat4__ = __webpack_require__(1);






class Renderer {
  constructor(el) {
    const gl = this.gl = el.getContext(`webgl`);
    gl.viewport(0, 0, el.width, el.height);
    gl.clearColor(0, 0, 0, 1);
    
    const program = this.program = new __WEBPACK_IMPORTED_MODULE_2__programManager_program__["a" /* default */](gl, __WEBPACK_IMPORTED_MODULE_0__programManager_chuncks_standard_vert___default.a, __WEBPACK_IMPORTED_MODULE_1__programManager_chuncks_standard_frag___default.a);
    this.tex = new __WEBPACK_IMPORTED_MODULE_3__programManager_tex__["a" /* default */](gl);
    
    gl.uniformMatrix4fv(gl.getUniformLocation(program.native, `uProjectionMatrix`), 
      false, new __WEBPACK_IMPORTED_MODULE_4__geom_mat4__["a" /* default */]().setCanvasProjection(el.width, el.height));
  }

  render(world) {
    const gl = this.gl;
    const tex = this.tex;
    const program = this.program;
    const buffer = program.buffer;
    const objects = world.children;
    
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    buffer.clear();

    for (let i = 0, l = objects.length, texSlot; i < l; i++) {
      // assign program to objects then sort for batches
      // if no mask or filter use standard shaders
      // invoke setProgram of program manager to use or create and then use program 
            
      texSlot = tex.bind(objects[i].texture);
      buffer.concat(objects[i], i, texSlot);
    }
    
    program.prepare();
    
    gl.drawArrays(gl.TRIANGLES, 0, buffer.vertices);
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Renderer;



/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = "precision highp float;\r\n\r\nvarying vec2 vTexCoord;\r\nvarying int vTexSlot;\r\n\r\nuniform sampler2D uSamplers[8];\r\n\r\nvoid main(){\r\n    gl_FragColor = texture2D(uSamplers[vTexSlot], vTexCoord);\r\n}\r\n"

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = "attribute vec3 aPosition;\r\nattribute vec2 aTexCoord;\r\nattribute int aTexSlot;\r\n\r\nuniform mat4 uProjectionMatrix;\r\n\r\nvarying vec2 vTexCoord;\r\nvarying int vTexSlot;\r\n\r\nvoid main(){\r\n    gl_Position = uProjectionMatrix * vec4(aPosition, 1.0);\r\n    vTexCoord = aTexCoord;\r\n    vTexSlot = aTexSlot;\r\n}\r\n"

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__renderer__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__display_group__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__display_sprite__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__graphic_texture__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return __WEBPACK_IMPORTED_MODULE_2__display_sprite__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return __WEBPACK_IMPORTED_MODULE_1__display_group__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return __WEBPACK_IMPORTED_MODULE_0__renderer__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Texture", function() { return __WEBPACK_IMPORTED_MODULE_3__graphic_texture__["a"]; });








/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Buffer extends Float32Array {
  constructor() {
    super(512);
    this.size = 0;
    this.vertices = 0;
  }
  
  concat(object, z, s) {
    const t = this;
    const texCoord = object.texCoord;
    let size = this.size;

    // left top
    t[size++] = object.x;
    t[size++] = object.y;
    t[size++] = z;
    t[size++] = texCoord.l;
    t[size++] = texCoord.t;
    t[size++] = s;

    // right bottom
    t[size++] = object.right;
    t[size++] = object.bottom;
    t[size++] = z;
    t[size++] = texCoord.r;
    t[size++] = texCoord.b;
    t[size++] = s;

    // left bottom
    t[size++] = object.left;
    t[size++] = object.bottom;
    t[size++] = z;
    t[size++] = texCoord.l;
    t[size++] = texCoord.b;
    t[size++] = s;


    // left top
    t[size++] = object.x;
    t[size++] = object.y;
    t[size++] = z;
    t[size++] = texCoord.l;
    t[size++] = texCoord.t;
    t[size++] = s;

    // right bottom
    t[size++] = object.right;
    t[size++] = object.bottom;
    t[size++] = z;
    t[size++] = texCoord.r;
    t[size++] = texCoord.b;
    t[size++] = s;
    
    // right top
    t[size++] = object.right;
    t[size++] = object.top;
    t[size++] = z;
    t[size++] = texCoord.r;
    t[size++] = texCoord.t;
    t[size++] = s;

    this.size = size;
    this.vertices += 6;
  }
  
  clear() {
    this.size = 0;
    this.vertices = 0;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Buffer;



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__buffer__ = __webpack_require__(8);


class Program {
  constructor(gl, vertexSource, fragmentSource) {
    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(vertexShader, vertexSource);
    gl.shaderSource(fragmentShader, fragmentSource);
    gl.compileShader(vertexShader);
    gl.compileShader(fragmentShader);
    const program = this.native = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);

    this.buffer = new __WEBPACK_IMPORTED_MODULE_0__buffer__["a" /* default */]();
  }

  prepare() {
    const gl = this.gl;
    const buffer = gl.createBuffer(); // maybe it doesn't need to create it every time
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // don't bind if bound?
    gl.bufferData(gl.ARRAY_BUFFER, this.buffer, gl.STATIC_DRAW); // maybe dynamic and sub data is quicker
    gl.useProgram(this.native); // todo program manager should check current program is used already
    // wtf
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Program;



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Tex {
  constructor(gl) {
    this.gl = gl;
    this.slots = [null, null, null, null, null, null, null, null];
  }

  bind(texture) {
    const slots = this.slots;
    let index = slots.indexOf(texture);

    if (index === -1) {
      index = slots.indexOf(null);
      slots[index] = texture;
      
      const gl = this.gl;
      const tex = gl.createTexture();
      gl.activeTexture(gl[`TEXTURE${index}`]);
      gl.bindTexture(gl.TEXTURE_2D, tex);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
    }

    return index;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tex;



/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,